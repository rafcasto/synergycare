rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user has a specific role
    function hasRole(role) {
      return request.auth != null && request.auth.token.role == role;
    }
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the resource
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    // User collection rules
    match /users/{userId} {
      // Users can read their own profile, admins can read all
      allow read: if isOwner(userId) || hasRole('admin');
      
      // Users can update their own profile, admins can update all
      allow write: if isOwner(userId) || hasRole('admin');
      
      // Only admins can create users (through backend)
      allow create: if hasRole('admin');
    }
    
    // Doctor collection rules
    match /doctors/{doctorId} {
      // Anyone authenticated can read doctor profiles (for finding doctors)
      allow read: if isAuthenticated();
      
      // Only the doctor themselves or admins can update
      allow write: if isOwner(resource.data.userId) || hasRole('admin');
      
      // Only doctors or admins can create doctor profiles
      allow create: if hasRole('doctor') || hasRole('admin');
    }
    
    // Patient collection rules
    match /patients/{patientId} {
      // Only the patient themselves, their doctors, or admins can read
      allow read: if isOwner(resource.data.userId) || hasRole('doctor') || hasRole('admin');
      
      // Only the patient themselves or admins can update
      allow write: if isOwner(resource.data.userId) || hasRole('admin');
      
      // Only patients or admins can create patient profiles
      allow create: if hasRole('patient') || hasRole('admin');
    }
    
    // Appointment collection rules
    match /appointments/{appointmentId} {
      // Patients can read their own appointments, doctors can read appointments with them, admins can read all
      allow read: if isOwner(resource.data.patientId) || 
                     isOwner(resource.data.doctorId) || 
                     hasRole('admin');
      
      // Patients can create appointments, doctors and admins can update status
      allow create: if hasRole('patient') || hasRole('admin');
      allow update: if hasRole('doctor') || hasRole('admin') || 
                       (hasRole('patient') && isOwner(resource.data.patientId));
      
      // Only admins can delete appointments
      allow delete: if hasRole('admin');
    }
    
    // Medical Records collection rules
    match /medical_records/{recordId} {
      // Only the patient, their doctor, or admins can read medical records
      allow read: if isOwner(resource.data.patientId) || 
                     hasRole('doctor') || 
                     hasRole('admin');
      
      // Only doctors or admins can create/update medical records
      allow write: if hasRole('doctor') || hasRole('admin');
    }
    
    // Reviews collection rules
    match /reviews/{reviewId} {
      // Anyone can read reviews (public)
      allow read: if isAuthenticated();
      
      // Only patients can create reviews for their appointments
      allow create: if hasRole('patient');
      
      // Only the review author or admins can update/delete
      allow update, delete: if isOwner(resource.data.patientId) || hasRole('admin');
    }
    
    // Admin-only collections
    match /admin/{document} {
      allow read, write: if hasRole('admin');
    }
    
    // System logs (admin only)
    match /logs/{logId} {
      allow read: if hasRole('admin');
      allow write: if false; // Logs should only be written by server
    }
  }
}