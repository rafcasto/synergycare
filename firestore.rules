rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user has a specific role (from Firestore data)
    function hasRole(role) {
      return request.auth != null && 
             (request.auth.token.role == role || 
              (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role));
    }
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the resource
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    // HIPAA-compliant approach: Create a separate authorized access collection
    function hasAuthorizedAccess(patientId) {
      // Check if there's an active doctor-patient relationship in the authorized_access collection
      return request.auth != null && hasRole('doctor') &&
             exists(/databases/$(database)/documents/authorized_access/$(request.auth.uid + '_' + patientId));
    }
    
    // Temporary test collection for diagnostics
    match /test_collection/{testId} {
      allow read, write: if isAuthenticated();
    }
    
    // User collection rules - HIPAA COMPLIANT
    match /users/{userId} {
      // Users can read their own profile, authorized doctors can read patient profiles, admins can read all
      allow read: if isOwner(userId) || 
                     hasRole('admin') ||
                     (hasRole('doctor') && 
                      get(/databases/$(database)/documents/users/$(userId)).data.role == 'patient' && 
                      hasAuthorizedAccess(userId));
      
      // Users can update their own profile, admins can update all
      allow update: if isOwner(userId) || hasRole('admin');
      
      // Users can create their own profile during registration
      allow create: if isOwner(userId) || hasRole('admin');
    }
    
    // Doctor collection rules - PRIVATE (sensitive data)
    match /doctors/{doctorId} {
      // Only the doctor themselves or admins can read private data
      allow read: if isOwner(doctorId) || hasRole('admin');
      
      // Only the doctor themselves or admins can update
      allow update: if isOwner(doctorId) || hasRole('admin');
      
      // Users can create their own doctor profile during registration
      allow create: if isOwner(doctorId) || hasRole('admin');
    }
    
    // Public doctor directory (limited fields only)
    match /doctor_public/{doctorId} {
      // Anyone authenticated can read public doctor info
      allow read: if isAuthenticated();
      
      // Only the doctor or admin can update
      allow create, update: if isOwner(doctorId) || hasRole('admin');
      
      // No delete - keep directory intact
      allow delete: if hasRole('admin');
    }
    
    // Patient collection rules - HIPAA COMPLIANT
    match /patients/{patientId} {
      // Patient themselves, their authorized doctors, or admins can read
      allow read: if isOwner(patientId) || 
                     hasRole('admin') ||
                     hasAuthorizedAccess(patientId);
      
      // Only the patient themselves or admins can update
      allow update: if isOwner(patientId) || hasRole('admin');
      
      // Users can create their own patient profile during registration
      allow create: if isOwner(patientId) || hasRole('admin');
    }
    
    // Authorized Access collection - Controls doctor-patient data access relationships
    match /authorized_access/{accessId} {
      // Format: doctorId_patientId
      // Allow doctors to create access records for their own appointments
      allow read: if hasRole('admin') || hasRole('doctor');
      allow create: if hasRole('doctor') && 
                       accessId == request.auth.uid + '_' + request.resource.data.patientId;
      allow update: if hasRole('admin');
      allow delete: if hasRole('admin');
    }
    
    // Appointment collection rules
    match /appointments/{appointmentId} {
      // Only involved parties can read
      allow read: if isOwner(resource.data.patientId) || 
                     isOwner(resource.data.doctorId) || 
                     hasRole('admin');
      
      // Patients can create, doctors and admins can update status
      allow create: if hasRole('patient') || hasRole('admin');
      allow update: if hasRole('doctor') || hasRole('admin') || 
                       (hasRole('patient') && isOwner(resource.data.patientId));
      
      // Only admins can delete appointments
      allow delete: if hasRole('admin');
    }
    
    // Medical Records collection rules - VERY STRICT
    match /medical_records/{recordId} {
      // Very restrictive - only patient and their assigned doctor
      allow read: if isOwner(resource.data.patientId) || 
                     (hasRole('doctor') && isOwner(resource.data.doctorId)) ||
                     hasRole('admin');
      
      // Only assigned doctors or admins can create/update
      allow write: if (hasRole('doctor') && isOwner(resource.data.doctorId)) || 
                      hasRole('admin');
    }
    
    // Reviews collection rules
    match /reviews/{reviewId} {
      // Anyone can read reviews (public)
      allow read: if isAuthenticated();
      
      // Only patients can create reviews
      allow create: if hasRole('patient');
      
      // Only the review author or admins can update/delete
      allow update, delete: if isOwner(resource.data.patientId) || hasRole('admin');
    }
    
    // Admin-only collections
    match /admin/{document} {
      allow read, write: if hasRole('admin');
    }
    
    // Doctor schedule collection rules
    match /doctor_schedules/{scheduleId} {
      // Only the doctor themselves or admins can access their schedules
      allow read, write: if isAuthenticated() && 
                           (isOwner(resource.data.doctorId) || hasRole('admin'));
      
      // Allow creating new schedules - more permissive for doctors
      allow create: if isAuthenticated() && 
                       (isOwner(request.resource.data.doctorId) || 
                        hasRole('doctor') || 
                        hasRole('admin'));
    }
    
    // Schedule exceptions collection rules
    match /schedule_exceptions/{exceptionId} {
      // Only the doctor themselves or admins can access their exceptions
      allow read, write: if isAuthenticated() && 
                           (isOwner(resource.data.doctorId) || hasRole('admin'));
      
      // Allow creating new exceptions - more permissive for doctors
      allow create: if isAuthenticated() && 
                       (isOwner(request.resource.data.doctorId) || 
                        hasRole('doctor') || 
                        hasRole('admin'));
    }
    
    // Availability slots collection rules
    match /availability_slots/{slotId} {
      // Doctors can manage their own slots, patients can read all slots for booking
      allow read: if isAuthenticated() && 
                     (isOwner(resource.data.doctorId) || 
                      hasRole('admin') ||
                      hasRole('patient'));
      
      // Doctors can fully manage their own slots - more permissive
      allow write: if isAuthenticated() && 
                      (isOwner(resource.data.doctorId) || 
                       hasRole('doctor') || 
                       hasRole('admin'));
      
      // Patients can book available slots (change status to 'booked' only)
      allow update: if hasRole('patient') && 
                       (resource.data.status == 'available' || !('status' in resource.data)) &&
                       request.resource.data.status == 'booked' &&
                       request.resource.data.doctorId == resource.data.doctorId &&
                       request.resource.data.date == resource.data.date &&
                       request.resource.data.startTime == resource.data.startTime &&
                       request.resource.data.endTime == resource.data.endTime;
      
      // Allow creating new slots - more permissive for doctors
      allow create: if isAuthenticated() && 
                       (isOwner(request.resource.data.doctorId) || 
                        hasRole('doctor') || 
                        hasRole('admin'));
    }
    
    // Audit logs (read-only for admin)
    match /audit_logs/{logId} {
      allow read: if hasRole('admin');
      allow write: if false; // Only server functions should write logs
    }
    
    // Block all other collections by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}