rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user has a specific role (from Firestore data)
    function hasRole(role) {
      return request.auth != null && 
             (request.auth.token.role == role || 
              get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role);
    }
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the resource
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    // Helper function to check if data contains sensitive fields
    function containsSensitiveData(data) {
      return 'medicalLicense' in data || 
             'phoneNumber' in data || 
             'address' in data ||
             'emergencyContact' in data ||
             'insuranceNumber' in data;
    }
    
    // User collection rules
    match /users/{userId} {
      // Users can read their own profile, admins can read all
      allow read: if isOwner(userId) || hasRole('admin');
      
      // Users can update their own profile, admins can update all
      // Restrict sensitive field updates
      allow update: if (isOwner(userId) || hasRole('admin')) &&
                       (!containsSensitiveData(request.resource.data) || hasRole('admin'));
      
      // Users can create their own profile during registration
      allow create: if isOwner(userId) || hasRole('admin');
    }
    
    // Doctor collection rules - MORE RESTRICTIVE
    match /doctors/{doctorId} {
      // Public info only for finding doctors (limit fields)
      allow read: if isAuthenticated() && 
                     (isOwner(doctorId) || 
                      hasRole('admin') ||
                      // Only allow reading limited public fields
                      !containsSensitiveData(resource.data));
      
      // Only the doctor themselves or admins can update
      allow update: if isOwner(doctorId) || hasRole('admin');
      
      // Users can create their own doctor profile during registration
      allow create: if isOwner(doctorId) || hasRole('admin');
    }
    
    // Patient collection rules - HIPAA COMPLIANT
    match /patients/{patientId} {
      // Only the patient themselves or admins can read
      // Doctors can only read if they have an active appointment/relationship
      allow read: if isOwner(patientId) || 
                     hasRole('admin') ||
                     // TODO: Add doctor-patient relationship check
                     (hasRole('doctor') && 
                      exists(/databases/$(database)/documents/appointments/$(request.auth.uid + '_' + patientId)));
      
      // Only the patient themselves or admins can update
      allow update: if isOwner(patientId) || hasRole('admin');
      
      // Users can create their own patient profile during registration
      allow create: if isOwner(patientId) || hasRole('admin');
    }
    
    // Appointment collection rules
    match /appointments/{appointmentId} {
      // Only involved parties can read
      allow read: if isOwner(resource.data.patientId) || 
                     isOwner(resource.data.doctorId) || 
                     hasRole('admin');
      
      // Patients can create, doctors and admins can update status
      allow create: if hasRole('patient') || hasRole('admin');
      allow update: if hasRole('doctor') || hasRole('admin') || 
                       (hasRole('patient') && isOwner(resource.data.patientId));
      
      // Only admins can delete appointments
      allow delete: if hasRole('admin');
    }
    
    // Medical Records collection rules - STRICT
    match /medical_records/{recordId} {
      // Very restrictive - only patient and their assigned doctor
      allow read: if isOwner(resource.data.patientId) || 
                     (hasRole('doctor') && isOwner(resource.data.doctorId)) ||
                     hasRole('admin');
      
      // Only assigned doctors or admins can create/update
      allow write: if (hasRole('doctor') && isOwner(resource.data.doctorId)) || 
                      hasRole('admin');
    }
    
    // Reviews collection rules
    match /reviews/{reviewId} {
      // Anyone can read reviews (public) - but limit sensitive data
      allow read: if isAuthenticated();
      
      // Only patients who had appointments can create reviews
      allow create: if hasRole('patient') && 
                       exists(/databases/$(database)/documents/appointments/$(request.auth.uid + '_' + resource.data.doctorId));
      
      // Only the review author or admins can update/delete
      allow update, delete: if isOwner(resource.data.patientId) || hasRole('admin');
    }
    
    // Public doctor directory (limited fields only)
    match /doctor_public/{doctorId} {
      // Anyone can read public doctor info (name, specialization, rating)
      allow read: if isAuthenticated();
      
      // Only the doctor or admin can update
      allow write: if isOwner(doctorId) || hasRole('admin');
    }
    
    // Admin-only collections
    match /admin/{document} {
      allow read, write: if hasRole('admin');
    }
    
    // Audit logs (write-only for system, read for admin)
    match /audit_logs/{logId} {
      allow read: if hasRole('admin');
      allow write: if false; // Only server functions should write logs
    }
    
    // Block all other collections by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
