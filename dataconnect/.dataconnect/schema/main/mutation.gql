extend type Mutation {
  """
  ✨ Insert a single `Appointment` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  appointment_insert(
    """
    Data object to insert into the table.
    """
    data: Appointment_Data!
  ): Appointment_KeyOutput! @fdc_generated(from: "Appointment", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `Doctor` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  doctor_insert(
    """
    Data object to insert into the table.
    """
    data: Doctor_Data!
  ): Doctor_KeyOutput! @fdc_generated(from: "Doctor", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `MedicalRecord` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  medicalRecord_insert(
    """
    Data object to insert into the table.
    """
    data: MedicalRecord_Data!
  ): MedicalRecord_KeyOutput! @fdc_generated(from: "MedicalRecord", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `Patient` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  patient_insert(
    """
    Data object to insert into the table.
    """
    data: Patient_Data!
  ): Patient_KeyOutput! @fdc_generated(from: "Patient", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `Review` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  review_insert(
    """
    Data object to insert into the table.
    """
    data: Review_Data!
  ): Review_KeyOutput! @fdc_generated(from: "Review", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `User` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  user_insert(
    """
    Data object to insert into the table.
    """
    data: User_Data!
  ): User_KeyOutput! @fdc_generated(from: "User", purpose: INSERT_SINGLE)
  """
  ✨ Insert `Appointment` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  appointment_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Appointment_Data!]!
  ): [Appointment_KeyOutput!]! @fdc_generated(from: "Appointment", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `Doctor` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  doctor_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Doctor_Data!]!
  ): [Doctor_KeyOutput!]! @fdc_generated(from: "Doctor", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `MedicalRecord` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  medicalRecord_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [MedicalRecord_Data!]!
  ): [MedicalRecord_KeyOutput!]! @fdc_generated(from: "MedicalRecord", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `Patient` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  patient_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Patient_Data!]!
  ): [Patient_KeyOutput!]! @fdc_generated(from: "Patient", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `Review` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  review_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Review_Data!]!
  ): [Review_KeyOutput!]! @fdc_generated(from: "Review", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `User` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  user_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [User_Data!]!
  ): [User_KeyOutput!]! @fdc_generated(from: "User", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert or update a single `Appointment` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Appointment`.
  """
  appointment_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Appointment_Data!
  ): Appointment_KeyOutput! @fdc_generated(from: "Appointment", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `Doctor` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Doctor`.
  """
  doctor_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Doctor_Data!
  ): Doctor_KeyOutput! @fdc_generated(from: "Doctor", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `MedicalRecord` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `MedicalRecord`.
  """
  medicalRecord_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: MedicalRecord_Data!
  ): MedicalRecord_KeyOutput! @fdc_generated(from: "MedicalRecord", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `Patient` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Patient`.
  """
  patient_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Patient_Data!
  ): Patient_KeyOutput! @fdc_generated(from: "Patient", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `Review` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Review`.
  """
  review_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Review_Data!
  ): Review_KeyOutput! @fdc_generated(from: "Review", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `User` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `User`.
  """
  user_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: User_Data!
  ): User_KeyOutput! @fdc_generated(from: "User", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update `Appointment` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Appointment`.
  """
  appointment_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Appointment_Data!]!
  ): [Appointment_KeyOutput!]! @fdc_generated(from: "Appointment", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `Doctor` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Doctor`.
  """
  doctor_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Doctor_Data!]!
  ): [Doctor_KeyOutput!]! @fdc_generated(from: "Doctor", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `MedicalRecord` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `MedicalRecord`.
  """
  medicalRecord_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [MedicalRecord_Data!]!
  ): [MedicalRecord_KeyOutput!]! @fdc_generated(from: "MedicalRecord", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `Patient` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Patient`.
  """
  patient_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Patient_Data!]!
  ): [Patient_KeyOutput!]! @fdc_generated(from: "Patient", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `Review` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Review`.
  """
  review_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Review_Data!]!
  ): [Review_KeyOutput!]! @fdc_generated(from: "Review", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `User` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `User`.
  """
  user_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [User_Data!]!
  ): [User_KeyOutput!]! @fdc_generated(from: "User", purpose: UPSERT_MULTIPLE)
  """
  ✨ Update a single `Appointment` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `Appointment` or `null` if not found.
  """
  appointment_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Appointment_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Appointment_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Appointment_Data!
  ): Appointment_KeyOutput @fdc_generated(from: "Appointment", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `Doctor` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `Doctor` or `null` if not found.
  """
  doctor_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Doctor_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Doctor_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Doctor_Data!
  ): Doctor_KeyOutput @fdc_generated(from: "Doctor", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `MedicalRecord` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `MedicalRecord` or `null` if not found.
  """
  medicalRecord_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: MedicalRecord_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: MedicalRecord_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: MedicalRecord_Data!
  ): MedicalRecord_KeyOutput @fdc_generated(from: "MedicalRecord", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `Patient` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `Patient` or `null` if not found.
  """
  patient_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Patient_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Patient_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Patient_Data!
  ): Patient_KeyOutput @fdc_generated(from: "Patient", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `Review` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `Review` or `null` if not found.
  """
  review_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Review_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Review_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Review_Data!
  ): Review_KeyOutput @fdc_generated(from: "Review", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `User` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `User` or `null` if not found.
  """
  user_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: User_Data!
  ): User_KeyOutput @fdc_generated(from: "User", purpose: UPDATE_SINGLE)
  """
  ✨ Update `Appointment` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  appointment_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Appointment_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Appointment_Data!
  ): Int! @fdc_generated(from: "Appointment", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `Doctor` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  doctor_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Doctor_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Doctor_Data!
  ): Int! @fdc_generated(from: "Doctor", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `MedicalRecord` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  medicalRecord_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: MedicalRecord_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: MedicalRecord_Data!
  ): Int! @fdc_generated(from: "MedicalRecord", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `Patient` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  patient_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Patient_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Patient_Data!
  ): Int! @fdc_generated(from: "Patient", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `Review` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  review_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Review_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Review_Data!
  ): Int! @fdc_generated(from: "Review", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `User` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  user_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: User_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: User_Data!
  ): Int! @fdc_generated(from: "User", purpose: UPDATE_MULTIPLE)
  """
  ✨ Delete a single `Appointment` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  appointment_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Appointment_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Appointment_FirstRow
  ): Appointment_KeyOutput @fdc_generated(from: "Appointment", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `Doctor` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  doctor_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Doctor_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Doctor_FirstRow
  ): Doctor_KeyOutput @fdc_generated(from: "Doctor", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `MedicalRecord` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  medicalRecord_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: MedicalRecord_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: MedicalRecord_FirstRow
  ): MedicalRecord_KeyOutput @fdc_generated(from: "MedicalRecord", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `Patient` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  patient_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Patient_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Patient_FirstRow
  ): Patient_KeyOutput @fdc_generated(from: "Patient", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `Review` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  review_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Review_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Review_FirstRow
  ): Review_KeyOutput @fdc_generated(from: "Review", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `User` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  user_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow
  ): User_KeyOutput @fdc_generated(from: "User", purpose: DELETE_SINGLE)
  """
  ✨ Delete `Appointment` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  appointment_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Appointment_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Appointment", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `Doctor` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  doctor_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Doctor_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Doctor", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `MedicalRecord` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  medicalRecord_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: MedicalRecord_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "MedicalRecord", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `Patient` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  patient_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Patient_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Patient", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `Review` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  review_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Review_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Review", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `User` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  user_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: User_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "User", purpose: DELETE_MULTIPLE)
}
