extend type Query {
  """
  ✨ Look up a single `Appointment` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  appointment(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Appointment_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Appointment_FirstRow
  ): Appointment @fdc_generated(from: "Appointment", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Doctor` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  doctor(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Doctor_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Doctor_FirstRow
  ): Doctor @fdc_generated(from: "Doctor", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `MedicalRecord` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  medicalRecord(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: MedicalRecord_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: MedicalRecord_FirstRow
  ): MedicalRecord @fdc_generated(from: "MedicalRecord", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Patient` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  patient(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Patient_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Patient_FirstRow
  ): Patient @fdc_generated(from: "Patient", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Review` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  review(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Review_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Review_FirstRow
  ): Review @fdc_generated(from: "Review", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `User` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  user(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow
  ): User @fdc_generated(from: "User", purpose: QUERY_SINGLE)
  """
  ✨ List `Appointment` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  appointments(
    """
    Filter condition to narrow down the query results.
    """
    where: Appointment_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Appointment_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Appointment_Having
  ): [Appointment!]! @fdc_generated(from: "Appointment", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Doctor` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  doctors(
    """
    Filter condition to narrow down the query results.
    """
    where: Doctor_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Doctor_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Doctor_Having
  ): [Doctor!]! @fdc_generated(from: "Doctor", purpose: QUERY_MULTIPLE)
  """
  ✨ List `MedicalRecord` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  medicalRecords(
    """
    Filter condition to narrow down the query results.
    """
    where: MedicalRecord_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [MedicalRecord_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: MedicalRecord_Having
  ): [MedicalRecord!]! @fdc_generated(from: "MedicalRecord", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Patient` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  patients(
    """
    Filter condition to narrow down the query results.
    """
    where: Patient_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Patient_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Patient_Having
  ): [Patient!]! @fdc_generated(from: "Patient", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Review` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  reviews(
    """
    Filter condition to narrow down the query results.
    """
    where: Review_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Review_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Review_Having
  ): [Review!]! @fdc_generated(from: "Review", purpose: QUERY_MULTIPLE)
  """
  ✨ List `User` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  users(
    """
    Filter condition to narrow down the query results.
    """
    where: User_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [User_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: User_Having
  ): [User!]! @fdc_generated(from: "User", purpose: QUERY_MULTIPLE)
}
